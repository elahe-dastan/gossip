// Code generated by protoc-gen-go. DO NOT EDIT.
// source: alibaba.proto

package protocol

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ID struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ID) Reset()         { *m = ID{} }
func (m *ID) String() string { return proto.CompactTextString(m) }
func (*ID) ProtoMessage()    {}
func (*ID) Descriptor() ([]byte, []int) {
	return fileDescriptor_41e0adaa29d5f671, []int{0}
}

func (m *ID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ID.Unmarshal(m, b)
}
func (m *ID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ID.Marshal(b, m, deterministic)
}
func (m *ID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ID.Merge(m, src)
}
func (m *ID) XXX_Size() int {
	return xxx_messageInfo_ID.Size(m)
}
func (m *ID) XXX_DiscardUnknown() {
	xxx_messageInfo_ID.DiscardUnknown(m)
}

var xxx_messageInfo_ID proto.InternalMessageInfo

func (m *ID) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Data struct {
	Id                   *ID      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Text                 string   `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_41e0adaa29d5f671, []int{1}
}

func (m *Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Data.Unmarshal(m, b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Data.Marshal(b, m, deterministic)
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return xxx_messageInfo_Data.Size(m)
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetId() *ID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Data) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func init() {
	proto.RegisterType((*ID)(nil), "ID")
	proto.RegisterType((*Data)(nil), "Data")
}

func init() {
	proto.RegisterFile("alibaba.proto", fileDescriptor_41e0adaa29d5f671)
}

var fileDescriptor_41e0adaa29d5f671 = []byte{
	// 200 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x8e, 0xbf, 0x4f, 0x85, 0x30,
	0x10, 0xc7, 0x69, 0x01, 0x8d, 0x67, 0x74, 0x38, 0x8d, 0xc1, 0xba, 0x90, 0xc6, 0x44, 0xa6, 0x62,
	0xf0, 0x4f, 0x10, 0x07, 0x56, 0x18, 0x9c, 0x5b, 0x39, 0xa1, 0x09, 0x58, 0x62, 0x2a, 0xd1, 0xff,
	0xde, 0x14, 0xf2, 0xde, 0xf6, 0xb6, 0xbb, 0xef, 0xaf, 0x7c, 0xe0, 0x4a, 0x4f, 0xd6, 0x68, 0xa3,
	0xd5, 0xf2, 0xed, 0xbc, 0x13, 0x0f, 0x83, 0x73, 0xc3, 0x44, 0xe5, 0xf6, 0x99, 0x9f, 0xcf, 0x92,
	0xe6, 0xc5, 0xff, 0xed, 0xa6, 0xbc, 0x05, 0xde, 0xd4, 0x78, 0x0d, 0xdc, 0xf6, 0x19, 0xcb, 0x59,
	0x91, 0xb6, 0xdc, 0xf6, 0xb2, 0x84, 0xa4, 0xd6, 0x5e, 0xe3, 0xcd, 0x51, 0xbf, 0xac, 0x62, 0xd5,
	0xd4, 0xc1, 0x44, 0x84, 0xc4, 0xd3, 0xaf, 0xcf, 0x78, 0xce, 0x8a, 0x8b, 0x76, 0xbb, 0xab, 0x15,
	0xa0, 0xb3, 0xf3, 0x32, 0xd1, 0xeb, 0xa8, 0x3d, 0x3e, 0x41, 0xd2, 0xd1, 0x57, 0x8f, 0xa9, 0x0a,
	0x2b, 0xe2, 0x4e, 0xed, 0x04, 0xea, 0x40, 0xa0, 0xde, 0x02, 0x81, 0x8c, 0xf0, 0x1e, 0xce, 0x5b,
	0xfa, 0x20, 0xbb, 0x12, 0x86, 0x79, 0xb1, 0x17, 0x64, 0xf4, 0xcc, 0xf0, 0x11, 0xe2, 0xf7, 0xd1,
	0xe1, 0x89, 0xae, 0x08, 0x71, 0x19, 0x99, 0xb3, 0x4d, 0x7e, 0xf9, 0x0f, 0x00, 0x00, 0xff, 0xff,
	0xd4, 0x97, 0x36, 0xbb, 0xf3, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the protocol package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SimpleChatClient is the client API for SimpleChat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SimpleChatClient interface {
	Send(ctx context.Context, in *Data, opts ...grpc.CallOption) (*empty.Empty, error)
	Receive(ctx context.Context, in *ID, opts ...grpc.CallOption) (SimpleChat_ReceiveClient, error)
	Who(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ID, error)
}

type simpleChatClient struct {
	cc grpc.ClientConnInterface
}

func NewSimpleChatClient(cc grpc.ClientConnInterface) SimpleChatClient {
	return &simpleChatClient{cc}
}

func (c *simpleChatClient) Send(ctx context.Context, in *Data, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/SimpleChat/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleChatClient) Receive(ctx context.Context, in *ID, opts ...grpc.CallOption) (SimpleChat_ReceiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SimpleChat_serviceDesc.Streams[0], "/SimpleChat/Receive", opts...)
	if err != nil {
		return nil, err
	}
	x := &simpleChatReceiveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SimpleChat_ReceiveClient interface {
	Recv() (*Data, error)
	grpc.ClientStream
}

type simpleChatReceiveClient struct {
	grpc.ClientStream
}

func (x *simpleChatReceiveClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *simpleChatClient) Who(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := c.cc.Invoke(ctx, "/SimpleChat/Who", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimpleChatServer is the server API for SimpleChat service.
type SimpleChatServer interface {
	Send(context.Context, *Data) (*empty.Empty, error)
	Receive(*ID, SimpleChat_ReceiveServer) error
	Who(context.Context, *empty.Empty) (*ID, error)
}

// UnimplementedSimpleChatServer can be embedded to have forward compatible implementations.
type UnimplementedSimpleChatServer struct {
}

func (*UnimplementedSimpleChatServer) Send(ctx context.Context, req *Data) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (*UnimplementedSimpleChatServer) Receive(req *ID, srv SimpleChat_ReceiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Receive not implemented")
}
func (*UnimplementedSimpleChatServer) Who(ctx context.Context, req *empty.Empty) (*ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Who not implemented")
}

func RegisterSimpleChatServer(s *grpc.Server, srv SimpleChatServer) {
	s.RegisterService(&_SimpleChat_serviceDesc, srv)
}

func _SimpleChat_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleChatServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SimpleChat/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleChatServer).Send(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleChat_Receive_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SimpleChatServer).Receive(m, &simpleChatReceiveServer{stream})
}

type SimpleChat_ReceiveServer interface {
	Send(*Data) error
	grpc.ServerStream
}

type simpleChatReceiveServer struct {
	grpc.ServerStream
}

func (x *simpleChatReceiveServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

func _SimpleChat_Who_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleChatServer).Who(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SimpleChat/Who",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleChatServer).Who(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _SimpleChat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "SimpleChat",
	HandlerType: (*SimpleChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _SimpleChat_Send_Handler,
		},
		{
			MethodName: "Who",
			Handler:    _SimpleChat_Who_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Receive",
			Handler:       _SimpleChat_Receive_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "alibaba.proto",
}
